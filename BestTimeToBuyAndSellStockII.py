#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2020/1/23 下午9:21
# @Title   : 122. 买卖股票的最佳时机 II
# @Link    : https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-ii/


QUESTION = """
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。

示例 1:
输入: [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。

示例 2:
输入: [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。
     因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。

示例 3:
输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
"""


THINKING = """
这个是 121. 买卖股票的最佳时机 的升级版
区别是这里允许多次交易，且顺序不能错乱

先考虑示例2，既然这里是升序的，那么最后一位减第一位，也就是第二位减第一位+第三位减第二位...一直到最后一位
然后再考虑示例1，如果第i天比第i-1天小，那么第i-1天就不应该买，因为是复数了嘛，我们只关注差是正数的天

所以这样拆分开思考就好办了，初始状态的利润为0，遍历数组，如果出现差大于0的时候，就加上这个差值，否则继续
"""


from typing import List


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        profit = 0
        days = len(prices)
        for i in range(1, days):
            current_profit = prices[i] - prices[i-1]
            if current_profit > 0:
                profit += current_profit

        return profit


if __name__ == '__main__':
    s = Solution()
    prices = [7,1,5,3,6,4]
    print(s.maxProfit(prices))
