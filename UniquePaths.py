#!/usr/bin/env python
# -*- coding: utf-8 -*-
# @Time    : 2019/12/27 上午11:25
# @Title   : 62. 不同路径
# @Link    : https://leetcode-cn.com/problems/unique-paths/


QUESTION = """
一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。

机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。

问总共有多少条不同的路径？

![](https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2018/10/22/robot_maze.png)

例如，上图是一个7 x 3 的网格。有多少可能的路径？

说明：m 和 n 的值均不超过 100。

示例 1:
输入: m = 3, n = 2
输出: 3
解释:
从左上角开始，总共有 3 条路径可以到达右下角。
1. 向右 -> 向右 -> 向下
2. 向右 -> 向下 -> 向右
3. 向下 -> 向右 -> 向右

示例 2:
输入: m = 7, n = 3
输出: 28
"""


THINKING = """
这个问题是个动态规划的问题，即是走到最远的步数 dp[i][j] = dp[i-1][j] + d[i][j-1]
即是等于到上面和左面的和，这样一来就简单了，画出图来更方便理解一些
初始化的为这样
    +---+----+----+----+----+
    | 1 |  1 |  1 |  1 |  1 |
    +---+----+----+----+----+
    | 1 |    |    |    |    |
    +---+----+----+----+----+
    | 1 |    |    |    |    |
    +---+----+----+----+----+
    
然后把空白的地方填上数字，每一个空白的格子都等于上面的格子+左边的格子
    +---+----+----+----+----+
    | 1 |  1 |  1 |  1 |  1 |
    +---+----+----+----+----+
    | 1 |  2 |  3 |  4 |  5 |
    +---+----+----+----+----+
    | 1 |  2 |  5 |  9 | 14 |
    +---+----+----+----+----+
    
然后看到了有一种更数学的解法，原理也难理解
首先机器人最终走到了右下角肯定是走了 m+n-2 步，其中m-1步往右走，n-1步往下走
那么看有m-1步或者n-1有多少种走法就行，不允许重复，也就是组合combination的概念
C_(m+n-2)^(m-1)或者C_(m+n-2)^(n-1)即可，因为二者展开是一样的
paths = (m+n-2)! / [(m-1)! * (n-1)!] 
"""


import math


class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        return math.factorial(m+n-2)//(math.factorial(m-1) * math.factorial(n-1))


if __name__ == '__main__':
    s = Solution()
    m = 7
    n = 3
    print(s.uniquePaths(m, n))
